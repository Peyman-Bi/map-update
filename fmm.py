# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fmm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fmm')
    _fmm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fmm', [dirname(__file__)])
        except ImportError:
            import _fmm
            return _fmm
        try:
            _mod = imp.load_module('_fmm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fmm = swig_import_helper()
    del swig_import_helper
else:
    import _fmm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import builtins

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except builtins.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except builtins.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fmm.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fmm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fmm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fmm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fmm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fmm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fmm.SwigPyIterator_copy(self)

    def __next__(self):
        return _fmm.SwigPyIterator_next(self)

    def __next__(self):
        return _fmm.SwigPyIterator___next__(self)

    def previous(self):
        return _fmm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fmm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fmm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fmm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fmm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fmm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fmm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fmm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fmm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _fmm.SHARED_PTR_DISOWN
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.IntVector___nonzero__(self)

    def __bool__(self):
        return _fmm.IntVector___bool__(self)

    def __len__(self):
        return _fmm.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.IntVector___setitem__(self, *args)

    def pop(self):
        return _fmm.IntVector_pop(self)

    def append(self, x):
        return _fmm.IntVector_append(self, x)

    def empty(self):
        return _fmm.IntVector_empty(self)

    def size(self):
        return _fmm.IntVector_size(self)

    def swap(self, v):
        return _fmm.IntVector_swap(self, v)

    def begin(self):
        return _fmm.IntVector_begin(self)

    def end(self):
        return _fmm.IntVector_end(self)

    def rbegin(self):
        return _fmm.IntVector_rbegin(self)

    def rend(self):
        return _fmm.IntVector_rend(self)

    def clear(self):
        return _fmm.IntVector_clear(self)

    def get_allocator(self):
        return _fmm.IntVector_get_allocator(self)

    def pop_back(self):
        return _fmm.IntVector_pop_back(self)

    def erase(self, *args):
        return _fmm.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_IntVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.IntVector_push_back(self, x)

    def front(self):
        return _fmm.IntVector_front(self)

    def back(self):
        return _fmm.IntVector_back(self)

    def assign(self, n, x):
        return _fmm.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.IntVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.IntVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.IntVector_reserve(self, n)

    def capacity(self):
        return _fmm.IntVector_capacity(self)
    __swig_destroy__ = _fmm.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _fmm.IntVector_swigregister
IntVector_swigregister(IntVector)

class IDVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.IDVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.IDVector___nonzero__(self)

    def __bool__(self):
        return _fmm.IDVector___bool__(self)

    def __len__(self):
        return _fmm.IDVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.IDVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.IDVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.IDVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.IDVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.IDVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.IDVector___setitem__(self, *args)

    def pop(self):
        return _fmm.IDVector_pop(self)

    def append(self, x):
        return _fmm.IDVector_append(self, x)

    def empty(self):
        return _fmm.IDVector_empty(self)

    def size(self):
        return _fmm.IDVector_size(self)

    def swap(self, v):
        return _fmm.IDVector_swap(self, v)

    def begin(self):
        return _fmm.IDVector_begin(self)

    def end(self):
        return _fmm.IDVector_end(self)

    def rbegin(self):
        return _fmm.IDVector_rbegin(self)

    def rend(self):
        return _fmm.IDVector_rend(self)

    def clear(self):
        return _fmm.IDVector_clear(self)

    def get_allocator(self):
        return _fmm.IDVector_get_allocator(self)

    def pop_back(self):
        return _fmm.IDVector_pop_back(self)

    def erase(self, *args):
        return _fmm.IDVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_IDVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.IDVector_push_back(self, x)

    def front(self):
        return _fmm.IDVector_front(self)

    def back(self):
        return _fmm.IDVector_back(self)

    def assign(self, n, x):
        return _fmm.IDVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.IDVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.IDVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.IDVector_reserve(self, n)

    def capacity(self):
        return _fmm.IDVector_capacity(self)
    __swig_destroy__ = _fmm.delete_IDVector
    __del__ = lambda self: None
IDVector_swigregister = _fmm.IDVector_swigregister
IDVector_swigregister(IDVector)

class HexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HexVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.HexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.HexVector___nonzero__(self)

    def __bool__(self):
        return _fmm.HexVector___bool__(self)

    def __len__(self):
        return _fmm.HexVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.HexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.HexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.HexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.HexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.HexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.HexVector___setitem__(self, *args)

    def pop(self):
        return _fmm.HexVector_pop(self)

    def append(self, x):
        return _fmm.HexVector_append(self, x)

    def empty(self):
        return _fmm.HexVector_empty(self)

    def size(self):
        return _fmm.HexVector_size(self)

    def swap(self, v):
        return _fmm.HexVector_swap(self, v)

    def begin(self):
        return _fmm.HexVector_begin(self)

    def end(self):
        return _fmm.HexVector_end(self)

    def rbegin(self):
        return _fmm.HexVector_rbegin(self)

    def rend(self):
        return _fmm.HexVector_rend(self)

    def clear(self):
        return _fmm.HexVector_clear(self)

    def get_allocator(self):
        return _fmm.HexVector_get_allocator(self)

    def pop_back(self):
        return _fmm.HexVector_pop_back(self)

    def erase(self, *args):
        return _fmm.HexVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_HexVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.HexVector_push_back(self, x)

    def front(self):
        return _fmm.HexVector_front(self)

    def back(self):
        return _fmm.HexVector_back(self)

    def assign(self, n, x):
        return _fmm.HexVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.HexVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.HexVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.HexVector_reserve(self, n)

    def capacity(self):
        return _fmm.HexVector_capacity(self)
    __swig_destroy__ = _fmm.delete_HexVector
    __del__ = lambda self: None
HexVector_swigregister = _fmm.HexVector_swigregister
HexVector_swigregister(HexVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _fmm.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _fmm.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _fmm.UnsignedIntVector_pop(self)

    def append(self, x):
        return _fmm.UnsignedIntVector_append(self, x)

    def empty(self):
        return _fmm.UnsignedIntVector_empty(self)

    def size(self):
        return _fmm.UnsignedIntVector_size(self)

    def swap(self, v):
        return _fmm.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _fmm.UnsignedIntVector_begin(self)

    def end(self):
        return _fmm.UnsignedIntVector_end(self)

    def rbegin(self):
        return _fmm.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _fmm.UnsignedIntVector_rend(self)

    def clear(self):
        return _fmm.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _fmm.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _fmm.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _fmm.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _fmm.UnsignedIntVector_front(self)

    def back(self):
        return _fmm.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _fmm.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _fmm.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _fmm.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _fmm.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _fmm.DoubleVector___bool__(self)

    def __len__(self):
        return _fmm.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _fmm.DoubleVector_pop(self)

    def append(self, x):
        return _fmm.DoubleVector_append(self, x)

    def empty(self):
        return _fmm.DoubleVector_empty(self)

    def size(self):
        return _fmm.DoubleVector_size(self)

    def swap(self, v):
        return _fmm.DoubleVector_swap(self, v)

    def begin(self):
        return _fmm.DoubleVector_begin(self)

    def end(self):
        return _fmm.DoubleVector_end(self)

    def rbegin(self):
        return _fmm.DoubleVector_rbegin(self)

    def rend(self):
        return _fmm.DoubleVector_rend(self)

    def clear(self):
        return _fmm.DoubleVector_clear(self)

    def get_allocator(self):
        return _fmm.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _fmm.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _fmm.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.DoubleVector_push_back(self, x)

    def front(self):
        return _fmm.DoubleVector_front(self)

    def back(self):
        return _fmm.DoubleVector_back(self)

    def assign(self, n, x):
        return _fmm.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.DoubleVector_reserve(self, n)

    def capacity(self):
        return _fmm.DoubleVector_capacity(self)
    __swig_destroy__ = _fmm.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _fmm.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class PyCandidateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyCandidateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyCandidateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fmm.PyCandidateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _fmm.PyCandidateVector___nonzero__(self)

    def __bool__(self):
        return _fmm.PyCandidateVector___bool__(self)

    def __len__(self):
        return _fmm.PyCandidateVector___len__(self)

    def __getslice__(self, i, j):
        return _fmm.PyCandidateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fmm.PyCandidateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fmm.PyCandidateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fmm.PyCandidateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fmm.PyCandidateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fmm.PyCandidateVector___setitem__(self, *args)

    def pop(self):
        return _fmm.PyCandidateVector_pop(self)

    def append(self, x):
        return _fmm.PyCandidateVector_append(self, x)

    def empty(self):
        return _fmm.PyCandidateVector_empty(self)

    def size(self):
        return _fmm.PyCandidateVector_size(self)

    def swap(self, v):
        return _fmm.PyCandidateVector_swap(self, v)

    def begin(self):
        return _fmm.PyCandidateVector_begin(self)

    def end(self):
        return _fmm.PyCandidateVector_end(self)

    def rbegin(self):
        return _fmm.PyCandidateVector_rbegin(self)

    def rend(self):
        return _fmm.PyCandidateVector_rend(self)

    def clear(self):
        return _fmm.PyCandidateVector_clear(self)

    def get_allocator(self):
        return _fmm.PyCandidateVector_get_allocator(self)

    def pop_back(self):
        return _fmm.PyCandidateVector_pop_back(self)

    def erase(self, *args):
        return _fmm.PyCandidateVector_erase(self, *args)

    def __init__(self, *args):
        this = _fmm.new_PyCandidateVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _fmm.PyCandidateVector_push_back(self, x)

    def front(self):
        return _fmm.PyCandidateVector_front(self)

    def back(self):
        return _fmm.PyCandidateVector_back(self)

    def assign(self, n, x):
        return _fmm.PyCandidateVector_assign(self, n, x)

    def resize(self, *args):
        return _fmm.PyCandidateVector_resize(self, *args)

    def insert(self, *args):
        return _fmm.PyCandidateVector_insert(self, *args)

    def reserve(self, n):
        return _fmm.PyCandidateVector_reserve(self, n)

    def capacity(self):
        return _fmm.PyCandidateVector_capacity(self)
    __swig_destroy__ = _fmm.delete_PyCandidateVector
    __del__ = lambda self: None
PyCandidateVector_swigregister = _fmm.PyCandidateVector_swigregister
PyCandidateVector_swigregister(PyCandidateVector)

class LineString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineString, name)
    __repr__ = _swig_repr

    def get_x(self, i):
        return _fmm.LineString_get_x(self, i)

    def get_y(self, i):
        return _fmm.LineString_get_y(self, i)

    def set_x(self, i, v):
        return _fmm.LineString_set_x(self, i, v)

    def set_y(self, i, v):
        return _fmm.LineString_set_y(self, i, v)

    def add_point(self, *args):
        return _fmm.LineString_add_point(self, *args)

    def get_point(self, i):
        return _fmm.LineString_get_point(self, i)

    def at(self, i):
        return _fmm.LineString_at(self, i)

    def get_num_points(self):
        return _fmm.LineString_get_num_points(self)

    def is_empty(self):
        return _fmm.LineString_is_empty(self)

    def clear(self):
        return _fmm.LineString_clear(self)

    def get_length(self):
        return _fmm.LineString_get_length(self)

    def export_wkt(self, precision=8):
        return _fmm.LineString_export_wkt(self, precision)

    def export_json(self):
        return _fmm.LineString_export_json(self)

    def get_geometry_const(self):
        return _fmm.LineString_get_geometry_const(self)

    def get_geometry(self):
        return _fmm.LineString_get_geometry(self)

    def __eq__(self, rhs):
        return _fmm.LineString___eq__(self, rhs)

    def __init__(self):
        this = _fmm.new_LineString()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_LineString
    __del__ = lambda self: None
LineString_swigregister = _fmm.LineString_swigregister
LineString_swigregister(LineString)


def __lshift__(os, rhs):
    return _fmm.__lshift__(os, rhs)
__lshift__ = _fmm.__lshift__

def ogr2linestring(*args):
    return _fmm.ogr2linestring(*args)
ogr2linestring = _fmm.ogr2linestring

def wkt2linestring(wkt):
    return _fmm.wkt2linestring(wkt)
wkt2linestring = _fmm.wkt2linestring

def linestring2ogr(line):
    return _fmm.linestring2ogr(line)
linestring2ogr = _fmm.linestring2ogr

def point2ogr(p):
    return _fmm.point2ogr(p)
point2ogr = _fmm.point2ogr
class Candidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Candidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Candidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _fmm.Candidate_index_set
    __swig_getmethods__["index"] = _fmm.Candidate_index_get
    if _newclass:
        index = _swig_property(_fmm.Candidate_index_get, _fmm.Candidate_index_set)
    __swig_setmethods__["offset"] = _fmm.Candidate_offset_set
    __swig_getmethods__["offset"] = _fmm.Candidate_offset_get
    if _newclass:
        offset = _swig_property(_fmm.Candidate_offset_get, _fmm.Candidate_offset_set)
    __swig_setmethods__["dist"] = _fmm.Candidate_dist_set
    __swig_getmethods__["dist"] = _fmm.Candidate_dist_get
    if _newclass:
        dist = _swig_property(_fmm.Candidate_dist_get, _fmm.Candidate_dist_set)
    __swig_setmethods__["edge"] = _fmm.Candidate_edge_set
    __swig_getmethods__["edge"] = _fmm.Candidate_edge_get
    if _newclass:
        edge = _swig_property(_fmm.Candidate_edge_get, _fmm.Candidate_edge_set)
    __swig_setmethods__["point"] = _fmm.Candidate_point_set
    __swig_getmethods__["point"] = _fmm.Candidate_point_get
    if _newclass:
        point = _swig_property(_fmm.Candidate_point_get, _fmm.Candidate_point_set)

    def __init__(self):
        this = _fmm.new_Candidate()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_Candidate
    __del__ = lambda self: None
Candidate_swigregister = _fmm.Candidate_swigregister
Candidate_swigregister(Candidate)

class MatchedCandidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchedCandidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchedCandidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _fmm.MatchedCandidate_c_set
    __swig_getmethods__["c"] = _fmm.MatchedCandidate_c_get
    if _newclass:
        c = _swig_property(_fmm.MatchedCandidate_c_get, _fmm.MatchedCandidate_c_set)
    __swig_setmethods__["ep"] = _fmm.MatchedCandidate_ep_set
    __swig_getmethods__["ep"] = _fmm.MatchedCandidate_ep_get
    if _newclass:
        ep = _swig_property(_fmm.MatchedCandidate_ep_get, _fmm.MatchedCandidate_ep_set)
    __swig_setmethods__["tp"] = _fmm.MatchedCandidate_tp_set
    __swig_getmethods__["tp"] = _fmm.MatchedCandidate_tp_get
    if _newclass:
        tp = _swig_property(_fmm.MatchedCandidate_tp_get, _fmm.MatchedCandidate_tp_set)
    __swig_setmethods__["sp_dist"] = _fmm.MatchedCandidate_sp_dist_set
    __swig_getmethods__["sp_dist"] = _fmm.MatchedCandidate_sp_dist_get
    if _newclass:
        sp_dist = _swig_property(_fmm.MatchedCandidate_sp_dist_get, _fmm.MatchedCandidate_sp_dist_set)

    def __init__(self):
        this = _fmm.new_MatchedCandidate()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_MatchedCandidate
    __del__ = lambda self: None
MatchedCandidate_swigregister = _fmm.MatchedCandidate_swigregister
MatchedCandidate_swigregister(MatchedCandidate)

class MatchResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _fmm.MatchResult_id_set
    __swig_getmethods__["id"] = _fmm.MatchResult_id_get
    if _newclass:
        id = _swig_property(_fmm.MatchResult_id_get, _fmm.MatchResult_id_set)
    __swig_setmethods__["opt_candidate_path"] = _fmm.MatchResult_opt_candidate_path_set
    __swig_getmethods__["opt_candidate_path"] = _fmm.MatchResult_opt_candidate_path_get
    if _newclass:
        opt_candidate_path = _swig_property(_fmm.MatchResult_opt_candidate_path_get, _fmm.MatchResult_opt_candidate_path_set)
    __swig_setmethods__["opath"] = _fmm.MatchResult_opath_set
    __swig_getmethods__["opath"] = _fmm.MatchResult_opath_get
    if _newclass:
        opath = _swig_property(_fmm.MatchResult_opath_get, _fmm.MatchResult_opath_set)
    __swig_setmethods__["cpath"] = _fmm.MatchResult_cpath_set
    __swig_getmethods__["cpath"] = _fmm.MatchResult_cpath_get
    if _newclass:
        cpath = _swig_property(_fmm.MatchResult_cpath_get, _fmm.MatchResult_cpath_set)
    __swig_setmethods__["indices"] = _fmm.MatchResult_indices_set
    __swig_getmethods__["indices"] = _fmm.MatchResult_indices_get
    if _newclass:
        indices = _swig_property(_fmm.MatchResult_indices_get, _fmm.MatchResult_indices_set)
    __swig_setmethods__["mgeom"] = _fmm.MatchResult_mgeom_set
    __swig_getmethods__["mgeom"] = _fmm.MatchResult_mgeom_get
    if _newclass:
        mgeom = _swig_property(_fmm.MatchResult_mgeom_get, _fmm.MatchResult_mgeom_set)

    def __init__(self):
        this = _fmm.new_MatchResult()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_MatchResult
    __del__ = lambda self: None
MatchResult_swigregister = _fmm.MatchResult_swigregister
MatchResult_swigregister(MatchResult)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _fmm.Edge_index_set
    __swig_getmethods__["index"] = _fmm.Edge_index_get
    if _newclass:
        index = _swig_property(_fmm.Edge_index_get, _fmm.Edge_index_set)
    __swig_setmethods__["id"] = _fmm.Edge_id_set
    __swig_getmethods__["id"] = _fmm.Edge_id_get
    if _newclass:
        id = _swig_property(_fmm.Edge_id_get, _fmm.Edge_id_set)
    __swig_setmethods__["source"] = _fmm.Edge_source_set
    __swig_getmethods__["source"] = _fmm.Edge_source_get
    if _newclass:
        source = _swig_property(_fmm.Edge_source_get, _fmm.Edge_source_set)
    __swig_setmethods__["target"] = _fmm.Edge_target_set
    __swig_getmethods__["target"] = _fmm.Edge_target_get
    if _newclass:
        target = _swig_property(_fmm.Edge_target_get, _fmm.Edge_target_set)
    __swig_setmethods__["length"] = _fmm.Edge_length_set
    __swig_getmethods__["length"] = _fmm.Edge_length_get
    if _newclass:
        length = _swig_property(_fmm.Edge_length_get, _fmm.Edge_length_set)
    __swig_setmethods__["geom"] = _fmm.Edge_geom_set
    __swig_getmethods__["geom"] = _fmm.Edge_geom_get
    if _newclass:
        geom = _swig_property(_fmm.Edge_geom_get, _fmm.Edge_geom_set)

    def __init__(self):
        this = _fmm.new_Edge()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_Edge
    __del__ = lambda self: None
Edge_swigregister = _fmm.Edge_swigregister
Edge_swigregister(Edge)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmm.new_Network(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def get_node_count(self):
        return _fmm.Network_get_node_count(self)

    def get_edge_count(self):
        return _fmm.Network_get_edge_count(self)

    def get_edge(self, id):
        return _fmm.Network_get_edge(self, id)

    def get_edges(self):
        return _fmm.Network_get_edges(self)

    def get_edge_id(self, index):
        return _fmm.Network_get_edge_id(self, index)

    def get_edge_index(self, id):
        return _fmm.Network_get_edge_index(self, id)

    def get_node_id(self, index):
        return _fmm.Network_get_node_id(self, index)

    def get_node_index(self, id):
        return _fmm.Network_get_node_index(self, id)

    def get_node_geom_from_idx(self, index):
        return _fmm.Network_get_node_geom_from_idx(self, index)

    def search_tr_cs_knn(self, *args):
        return _fmm.Network_search_tr_cs_knn(self, *args)

    def get_edge_geom(self, edge_id):
        return _fmm.Network_get_edge_geom(self, edge_id)

    def complete_path_to_geometry(self, traj, complete_path):
        return _fmm.Network_complete_path_to_geometry(self, traj, complete_path)

    def get_vertex_points(self):
        return _fmm.Network_get_vertex_points(self)

    def get_vertex_point(self, u):
        return _fmm.Network_get_vertex_point(self, u)

    def route2geometry(self, path):
        return _fmm.Network_route2geometry(self, path)
    if _newclass:
        candidate_compare = staticmethod(_fmm.Network_candidate_compare)
    else:
        candidate_compare = _fmm.Network_candidate_compare

    def add_edge(self, edge_id, source, target, geom):
        return _fmm.Network_add_edge(self, edge_id, source, target, geom)
    __swig_destroy__ = _fmm.delete_Network
    __del__ = lambda self: None
Network_swigregister = _fmm.Network_swigregister
Network_swigregister(Network)

def Network_candidate_compare(a, b):
    return _fmm.Network_candidate_compare(a, b)
Network_candidate_compare = _fmm.Network_candidate_compare

class PyCandidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyCandidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyCandidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _fmm.PyCandidate_index_set
    __swig_getmethods__["index"] = _fmm.PyCandidate_index_get
    if _newclass:
        index = _swig_property(_fmm.PyCandidate_index_get, _fmm.PyCandidate_index_set)
    __swig_setmethods__["edge_id"] = _fmm.PyCandidate_edge_id_set
    __swig_getmethods__["edge_id"] = _fmm.PyCandidate_edge_id_get
    if _newclass:
        edge_id = _swig_property(_fmm.PyCandidate_edge_id_get, _fmm.PyCandidate_edge_id_set)
    __swig_setmethods__["source"] = _fmm.PyCandidate_source_set
    __swig_getmethods__["source"] = _fmm.PyCandidate_source_get
    if _newclass:
        source = _swig_property(_fmm.PyCandidate_source_get, _fmm.PyCandidate_source_set)
    __swig_setmethods__["target"] = _fmm.PyCandidate_target_set
    __swig_getmethods__["target"] = _fmm.PyCandidate_target_get
    if _newclass:
        target = _swig_property(_fmm.PyCandidate_target_get, _fmm.PyCandidate_target_set)
    __swig_setmethods__["error"] = _fmm.PyCandidate_error_set
    __swig_getmethods__["error"] = _fmm.PyCandidate_error_get
    if _newclass:
        error = _swig_property(_fmm.PyCandidate_error_get, _fmm.PyCandidate_error_set)
    __swig_setmethods__["offset"] = _fmm.PyCandidate_offset_set
    __swig_getmethods__["offset"] = _fmm.PyCandidate_offset_get
    if _newclass:
        offset = _swig_property(_fmm.PyCandidate_offset_get, _fmm.PyCandidate_offset_set)
    __swig_setmethods__["length"] = _fmm.PyCandidate_length_set
    __swig_getmethods__["length"] = _fmm.PyCandidate_length_get
    if _newclass:
        length = _swig_property(_fmm.PyCandidate_length_get, _fmm.PyCandidate_length_set)
    __swig_setmethods__["ep"] = _fmm.PyCandidate_ep_set
    __swig_getmethods__["ep"] = _fmm.PyCandidate_ep_get
    if _newclass:
        ep = _swig_property(_fmm.PyCandidate_ep_get, _fmm.PyCandidate_ep_set)
    __swig_setmethods__["tp"] = _fmm.PyCandidate_tp_set
    __swig_getmethods__["tp"] = _fmm.PyCandidate_tp_get
    if _newclass:
        tp = _swig_property(_fmm.PyCandidate_tp_get, _fmm.PyCandidate_tp_set)
    __swig_setmethods__["spdist"] = _fmm.PyCandidate_spdist_set
    __swig_getmethods__["spdist"] = _fmm.PyCandidate_spdist_get
    if _newclass:
        spdist = _swig_property(_fmm.PyCandidate_spdist_get, _fmm.PyCandidate_spdist_set)

    def __init__(self):
        this = _fmm.new_PyCandidate()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_PyCandidate
    __del__ = lambda self: None
PyCandidate_swigregister = _fmm.PyCandidate_swigregister
PyCandidate_swigregister(PyCandidate)

class PyMatchResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyMatchResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyMatchResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _fmm.PyMatchResult_id_set
    __swig_getmethods__["id"] = _fmm.PyMatchResult_id_get
    if _newclass:
        id = _swig_property(_fmm.PyMatchResult_id_get, _fmm.PyMatchResult_id_set)
    __swig_setmethods__["opath"] = _fmm.PyMatchResult_opath_set
    __swig_getmethods__["opath"] = _fmm.PyMatchResult_opath_get
    if _newclass:
        opath = _swig_property(_fmm.PyMatchResult_opath_get, _fmm.PyMatchResult_opath_set)
    __swig_setmethods__["cpath"] = _fmm.PyMatchResult_cpath_set
    __swig_getmethods__["cpath"] = _fmm.PyMatchResult_cpath_get
    if _newclass:
        cpath = _swig_property(_fmm.PyMatchResult_cpath_get, _fmm.PyMatchResult_cpath_set)
    __swig_setmethods__["candidates"] = _fmm.PyMatchResult_candidates_set
    __swig_getmethods__["candidates"] = _fmm.PyMatchResult_candidates_get
    if _newclass:
        candidates = _swig_property(_fmm.PyMatchResult_candidates_get, _fmm.PyMatchResult_candidates_set)
    __swig_setmethods__["indices"] = _fmm.PyMatchResult_indices_set
    __swig_getmethods__["indices"] = _fmm.PyMatchResult_indices_get
    if _newclass:
        indices = _swig_property(_fmm.PyMatchResult_indices_get, _fmm.PyMatchResult_indices_set)
    __swig_setmethods__["mgeom"] = _fmm.PyMatchResult_mgeom_set
    __swig_getmethods__["mgeom"] = _fmm.PyMatchResult_mgeom_get
    if _newclass:
        mgeom = _swig_property(_fmm.PyMatchResult_mgeom_get, _fmm.PyMatchResult_mgeom_set)
    __swig_setmethods__["pgeom"] = _fmm.PyMatchResult_pgeom_set
    __swig_getmethods__["pgeom"] = _fmm.PyMatchResult_pgeom_get
    if _newclass:
        pgeom = _swig_property(_fmm.PyMatchResult_pgeom_get, _fmm.PyMatchResult_pgeom_set)

    def __init__(self):
        this = _fmm.new_PyMatchResult()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_PyMatchResult
    __del__ = lambda self: None
PyMatchResult_swigregister = _fmm.PyMatchResult_swigregister
PyMatchResult_swigregister(PyMatchResult)

class Record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _fmm.Record_source_set
    __swig_getmethods__["source"] = _fmm.Record_source_get
    if _newclass:
        source = _swig_property(_fmm.Record_source_get, _fmm.Record_source_set)
    __swig_setmethods__["target"] = _fmm.Record_target_set
    __swig_getmethods__["target"] = _fmm.Record_target_get
    if _newclass:
        target = _swig_property(_fmm.Record_target_get, _fmm.Record_target_set)
    __swig_setmethods__["first_n"] = _fmm.Record_first_n_set
    __swig_getmethods__["first_n"] = _fmm.Record_first_n_get
    if _newclass:
        first_n = _swig_property(_fmm.Record_first_n_get, _fmm.Record_first_n_set)
    __swig_setmethods__["prev_n"] = _fmm.Record_prev_n_set
    __swig_getmethods__["prev_n"] = _fmm.Record_prev_n_get
    if _newclass:
        prev_n = _swig_property(_fmm.Record_prev_n_get, _fmm.Record_prev_n_set)
    __swig_setmethods__["next_e"] = _fmm.Record_next_e_set
    __swig_getmethods__["next_e"] = _fmm.Record_next_e_get
    if _newclass:
        next_e = _swig_property(_fmm.Record_next_e_get, _fmm.Record_next_e_set)
    __swig_setmethods__["cost"] = _fmm.Record_cost_set
    __swig_getmethods__["cost"] = _fmm.Record_cost_get
    if _newclass:
        cost = _swig_property(_fmm.Record_cost_get, _fmm.Record_cost_set)
    __swig_setmethods__["next"] = _fmm.Record_next_set
    __swig_getmethods__["next"] = _fmm.Record_next_get
    if _newclass:
        next = _swig_property(_fmm.Record_next_get, _fmm.Record_next_set)

    def __init__(self):
        this = _fmm.new_Record()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_Record
    __del__ = lambda self: None
Record_swigregister = _fmm.Record_swigregister
Record_swigregister(Record)

class UBODT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBODT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBODT, name)
    __repr__ = _swig_repr

    def __init__(self, buckets_arg, multiplier_arg):
        this = _fmm.new_UBODT(buckets_arg, multiplier_arg)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_UBODT
    __del__ = lambda self: None

    def look_up(self, source, target):
        return _fmm.UBODT_look_up(self, source, target)

    def look_sp_path(self, source, target):
        return _fmm.UBODT_look_sp_path(self, source, target)

    def construct_complete_path(self, traj_id, path, edges, indices, reverse_tolerance):
        return _fmm.UBODT_construct_complete_path(self, traj_id, path, edges, indices, reverse_tolerance)

    def get_delta(self):
        return _fmm.UBODT_get_delta(self)

    def cal_bucket_index(self, source, target):
        return _fmm.UBODT_cal_bucket_index(self, source, target)

    def insert(self, r):
        return _fmm.UBODT_insert(self, r)

    def get_num_rows(self):
        return _fmm.UBODT_get_num_rows(self)
    if _newclass:
        read_ubodt_file = staticmethod(_fmm.UBODT_read_ubodt_file)
    else:
        read_ubodt_file = _fmm.UBODT_read_ubodt_file
    if _newclass:
        read_ubodt_csv = staticmethod(_fmm.UBODT_read_ubodt_csv)
    else:
        read_ubodt_csv = _fmm.UBODT_read_ubodt_csv
    if _newclass:
        read_ubodt_binary = staticmethod(_fmm.UBODT_read_ubodt_binary)
    else:
        read_ubodt_binary = _fmm.UBODT_read_ubodt_binary
    if _newclass:
        estimate_ubodt_rows = staticmethod(_fmm.UBODT_estimate_ubodt_rows)
    else:
        estimate_ubodt_rows = _fmm.UBODT_estimate_ubodt_rows
    if _newclass:
        find_prime_number = staticmethod(_fmm.UBODT_find_prime_number)
    else:
        find_prime_number = _fmm.UBODT_find_prime_number
    LOAD_FACTOR = _fmm.UBODT_LOAD_FACTOR
    BUFFER_LINE = _fmm.UBODT_BUFFER_LINE
UBODT_swigregister = _fmm.UBODT_swigregister
UBODT_swigregister(UBODT)

def UBODT_read_ubodt_file(filename, multiplier=50000):
    return _fmm.UBODT_read_ubodt_file(filename, multiplier)
UBODT_read_ubodt_file = _fmm.UBODT_read_ubodt_file

def UBODT_read_ubodt_csv(filename, multiplier=50000):
    return _fmm.UBODT_read_ubodt_csv(filename, multiplier)
UBODT_read_ubodt_csv = _fmm.UBODT_read_ubodt_csv

def UBODT_read_ubodt_binary(filename, multiplier=50000):
    return _fmm.UBODT_read_ubodt_binary(filename, multiplier)
UBODT_read_ubodt_binary = _fmm.UBODT_read_ubodt_binary

def UBODT_estimate_ubodt_rows(filename):
    return _fmm.UBODT_estimate_ubodt_rows(filename)
UBODT_estimate_ubodt_rows = _fmm.UBODT_estimate_ubodt_rows

def UBODT_find_prime_number(value):
    return _fmm.UBODT_find_prime_number(value)
UBODT_find_prime_number = _fmm.UBODT_find_prime_number

class NetworkGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkGraph, name)
    __repr__ = _swig_repr

    def __init__(self, network_arg):
        this = _fmm.new_NetworkGraph(network_arg)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def shortest_path_dijkstra(self, source, target):
        return _fmm.NetworkGraph_shortest_path_dijkstra(self, source, target)

    def calc_heuristic_dist(self, p1, p2):
        return _fmm.NetworkGraph_calc_heuristic_dist(self, p1, p2)

    def shortest_path_astar(self, source, target):
        return _fmm.NetworkGraph_shortest_path_astar(self, source, target)

    def back_track(self, source, target, pmap, dmap):
        return _fmm.NetworkGraph_back_track(self, source, target, pmap, dmap)

    def single_source_upperbound_dijkstra(self, source, delta, pmap, dmap):
        return _fmm.NetworkGraph_single_source_upperbound_dijkstra(self, source, delta, pmap, dmap)

    def get_edge_index(self, *args):
        return _fmm.NetworkGraph_get_edge_index(self, *args)

    def get_edge(self, *args):
        return _fmm.NetworkGraph_get_edge(self, *args)

    def get_edge_id(self, *args):
        return _fmm.NetworkGraph_get_edge_id(self, *args)

    def get_node_id(self, idx):
        return _fmm.NetworkGraph_get_node_id(self, idx)

    def get_node_index(self, id):
        return _fmm.NetworkGraph_get_node_index(self, id)

    def get_vertex_point(self, u):
        return _fmm.NetworkGraph_get_vertex_point(self, u)

    def print_graph(self):
        return _fmm.NetworkGraph_print_graph(self)

    def get_boost_graph(self):
        return _fmm.NetworkGraph_get_boost_graph(self)

    def get_network(self):
        return _fmm.NetworkGraph_get_network(self)

    def get_num_vertices(self):
        return _fmm.NetworkGraph_get_num_vertices(self)
    __swig_destroy__ = _fmm.delete_NetworkGraph
    __del__ = lambda self: None
NetworkGraph_swigregister = _fmm.NetworkGraph_swigregister
NetworkGraph_swigregister(NetworkGraph)

class FastMapMatchConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastMapMatchConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastMapMatchConfig, name)
    __repr__ = _swig_repr

    def __init__(self, k_arg=8, r_arg=300, gps_error=50, reverse_tolerance=0.0):
        this = _fmm.new_FastMapMatchConfig(k_arg, r_arg, gps_error, reverse_tolerance)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["k"] = _fmm.FastMapMatchConfig_k_set
    __swig_getmethods__["k"] = _fmm.FastMapMatchConfig_k_get
    if _newclass:
        k = _swig_property(_fmm.FastMapMatchConfig_k_get, _fmm.FastMapMatchConfig_k_set)
    __swig_setmethods__["radius"] = _fmm.FastMapMatchConfig_radius_set
    __swig_getmethods__["radius"] = _fmm.FastMapMatchConfig_radius_get
    if _newclass:
        radius = _swig_property(_fmm.FastMapMatchConfig_radius_get, _fmm.FastMapMatchConfig_radius_set)
    __swig_setmethods__["gps_error"] = _fmm.FastMapMatchConfig_gps_error_set
    __swig_getmethods__["gps_error"] = _fmm.FastMapMatchConfig_gps_error_get
    if _newclass:
        gps_error = _swig_property(_fmm.FastMapMatchConfig_gps_error_get, _fmm.FastMapMatchConfig_gps_error_set)
    __swig_setmethods__["reverse_tolerance"] = _fmm.FastMapMatchConfig_reverse_tolerance_set
    __swig_getmethods__["reverse_tolerance"] = _fmm.FastMapMatchConfig_reverse_tolerance_get
    if _newclass:
        reverse_tolerance = _swig_property(_fmm.FastMapMatchConfig_reverse_tolerance_get, _fmm.FastMapMatchConfig_reverse_tolerance_set)

    def validate(self):
        return _fmm.FastMapMatchConfig_validate(self)
    if _newclass:
        load_from_xml = staticmethod(_fmm.FastMapMatchConfig_load_from_xml)
    else:
        load_from_xml = _fmm.FastMapMatchConfig_load_from_xml
    if _newclass:
        load_from_arg = staticmethod(_fmm.FastMapMatchConfig_load_from_arg)
    else:
        load_from_arg = _fmm.FastMapMatchConfig_load_from_arg
    if _newclass:
        register_arg = staticmethod(_fmm.FastMapMatchConfig_register_arg)
    else:
        register_arg = _fmm.FastMapMatchConfig_register_arg
    if _newclass:
        register_help = staticmethod(_fmm.FastMapMatchConfig_register_help)
    else:
        register_help = _fmm.FastMapMatchConfig_register_help
    __swig_destroy__ = _fmm.delete_FastMapMatchConfig
    __del__ = lambda self: None
FastMapMatchConfig_swigregister = _fmm.FastMapMatchConfig_swigregister
FastMapMatchConfig_swigregister(FastMapMatchConfig)

def FastMapMatchConfig_load_from_xml(xml_data):
    return _fmm.FastMapMatchConfig_load_from_xml(xml_data)
FastMapMatchConfig_load_from_xml = _fmm.FastMapMatchConfig_load_from_xml

def FastMapMatchConfig_load_from_arg(arg_data):
    return _fmm.FastMapMatchConfig_load_from_arg(arg_data)
FastMapMatchConfig_load_from_arg = _fmm.FastMapMatchConfig_load_from_arg

def FastMapMatchConfig_register_arg(options):
    return _fmm.FastMapMatchConfig_register_arg(options)
FastMapMatchConfig_register_arg = _fmm.FastMapMatchConfig_register_arg

def FastMapMatchConfig_register_help(oss):
    return _fmm.FastMapMatchConfig_register_help(oss)
FastMapMatchConfig_register_help = _fmm.FastMapMatchConfig_register_help

class FastMapMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastMapMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastMapMatch, name)
    __repr__ = _swig_repr

    def __init__(self, network, graph, ubodt):
        this = _fmm.new_FastMapMatch(network, graph, ubodt)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def match_traj(self, traj, config):
        return _fmm.FastMapMatch_match_traj(self, traj, config)

    def match_wkt(self, wkt, config):
        return _fmm.FastMapMatch_match_wkt(self, wkt, config)

    def match_gps_file(self, gps_config, result_config, config, use_omp=True):
        return _fmm.FastMapMatch_match_gps_file(self, gps_config, result_config, config, use_omp)
    __swig_destroy__ = _fmm.delete_FastMapMatch
    __del__ = lambda self: None
FastMapMatch_swigregister = _fmm.FastMapMatch_swigregister
FastMapMatch_swigregister(FastMapMatch)

class UBODTGenAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBODTGenAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBODTGenAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, network, graph):
        this = _fmm.new_UBODTGenAlgorithm(network, graph)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def generate_ubodt(self, filename, delta, binary=True, use_omp=True):
        return _fmm.UBODTGenAlgorithm_generate_ubodt(self, filename, delta, binary, use_omp)

    def precompute_ubodt_single_thead(self, filename, delta, binary=True):
        return _fmm.UBODTGenAlgorithm_precompute_ubodt_single_thead(self, filename, delta, binary)

    def precompute_ubodt_omp(self, filename, delta, binary=True):
        return _fmm.UBODTGenAlgorithm_precompute_ubodt_omp(self, filename, delta, binary)
    __swig_destroy__ = _fmm.delete_UBODTGenAlgorithm
    __del__ = lambda self: None
UBODTGenAlgorithm_swigregister = _fmm.UBODTGenAlgorithm_swigregister
UBODTGenAlgorithm_swigregister(UBODTGenAlgorithm)

class GPSConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPSConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fmm.new_GPSConfig(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["file"] = _fmm.GPSConfig_file_set
    __swig_getmethods__["file"] = _fmm.GPSConfig_file_get
    if _newclass:
        file = _swig_property(_fmm.GPSConfig_file_get, _fmm.GPSConfig_file_set)
    __swig_setmethods__["id"] = _fmm.GPSConfig_id_set
    __swig_getmethods__["id"] = _fmm.GPSConfig_id_get
    if _newclass:
        id = _swig_property(_fmm.GPSConfig_id_get, _fmm.GPSConfig_id_set)
    __swig_setmethods__["geom"] = _fmm.GPSConfig_geom_set
    __swig_getmethods__["geom"] = _fmm.GPSConfig_geom_get
    if _newclass:
        geom = _swig_property(_fmm.GPSConfig_geom_get, _fmm.GPSConfig_geom_set)
    __swig_setmethods__["x"] = _fmm.GPSConfig_x_set
    __swig_getmethods__["x"] = _fmm.GPSConfig_x_get
    if _newclass:
        x = _swig_property(_fmm.GPSConfig_x_get, _fmm.GPSConfig_x_set)
    __swig_setmethods__["y"] = _fmm.GPSConfig_y_set
    __swig_getmethods__["y"] = _fmm.GPSConfig_y_get
    if _newclass:
        y = _swig_property(_fmm.GPSConfig_y_get, _fmm.GPSConfig_y_set)
    __swig_setmethods__["timestamp"] = _fmm.GPSConfig_timestamp_set
    __swig_getmethods__["timestamp"] = _fmm.GPSConfig_timestamp_get
    if _newclass:
        timestamp = _swig_property(_fmm.GPSConfig_timestamp_get, _fmm.GPSConfig_timestamp_set)
    __swig_setmethods__["gps_point"] = _fmm.GPSConfig_gps_point_set
    __swig_getmethods__["gps_point"] = _fmm.GPSConfig_gps_point_get
    if _newclass:
        gps_point = _swig_property(_fmm.GPSConfig_gps_point_get, _fmm.GPSConfig_gps_point_set)

    def validate(self):
        return _fmm.GPSConfig_validate(self)

    def get_gps_format(self):
        return _fmm.GPSConfig_get_gps_format(self)

    def to_string(self):
        return _fmm.GPSConfig_to_string(self)
    if _newclass:
        load_from_xml = staticmethod(_fmm.GPSConfig_load_from_xml)
    else:
        load_from_xml = _fmm.GPSConfig_load_from_xml
    if _newclass:
        load_from_arg = staticmethod(_fmm.GPSConfig_load_from_arg)
    else:
        load_from_arg = _fmm.GPSConfig_load_from_arg
    if _newclass:
        register_arg = staticmethod(_fmm.GPSConfig_register_arg)
    else:
        register_arg = _fmm.GPSConfig_register_arg
    if _newclass:
        register_help = staticmethod(_fmm.GPSConfig_register_help)
    else:
        register_help = _fmm.GPSConfig_register_help
    __swig_destroy__ = _fmm.delete_GPSConfig
    __del__ = lambda self: None
GPSConfig_swigregister = _fmm.GPSConfig_swigregister
GPSConfig_swigregister(GPSConfig)

def GPSConfig_load_from_xml(xml_data):
    return _fmm.GPSConfig_load_from_xml(xml_data)
GPSConfig_load_from_xml = _fmm.GPSConfig_load_from_xml

def GPSConfig_load_from_arg(arg_data):
    return _fmm.GPSConfig_load_from_arg(arg_data)
GPSConfig_load_from_arg = _fmm.GPSConfig_load_from_arg

def GPSConfig_register_arg(options):
    return _fmm.GPSConfig_register_arg(options)
GPSConfig_register_arg = _fmm.GPSConfig_register_arg

def GPSConfig_register_help(oss):
    return _fmm.GPSConfig_register_help(oss)
GPSConfig_register_help = _fmm.GPSConfig_register_help

class OutputConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["write_opath"] = _fmm.OutputConfig_write_opath_set
    __swig_getmethods__["write_opath"] = _fmm.OutputConfig_write_opath_get
    if _newclass:
        write_opath = _swig_property(_fmm.OutputConfig_write_opath_get, _fmm.OutputConfig_write_opath_set)
    __swig_setmethods__["write_offset"] = _fmm.OutputConfig_write_offset_set
    __swig_getmethods__["write_offset"] = _fmm.OutputConfig_write_offset_get
    if _newclass:
        write_offset = _swig_property(_fmm.OutputConfig_write_offset_get, _fmm.OutputConfig_write_offset_set)
    __swig_setmethods__["write_error"] = _fmm.OutputConfig_write_error_set
    __swig_getmethods__["write_error"] = _fmm.OutputConfig_write_error_get
    if _newclass:
        write_error = _swig_property(_fmm.OutputConfig_write_error_get, _fmm.OutputConfig_write_error_set)
    __swig_setmethods__["write_cpath"] = _fmm.OutputConfig_write_cpath_set
    __swig_getmethods__["write_cpath"] = _fmm.OutputConfig_write_cpath_get
    if _newclass:
        write_cpath = _swig_property(_fmm.OutputConfig_write_cpath_get, _fmm.OutputConfig_write_cpath_set)
    __swig_setmethods__["write_tpath"] = _fmm.OutputConfig_write_tpath_set
    __swig_getmethods__["write_tpath"] = _fmm.OutputConfig_write_tpath_get
    if _newclass:
        write_tpath = _swig_property(_fmm.OutputConfig_write_tpath_get, _fmm.OutputConfig_write_tpath_set)
    __swig_setmethods__["write_mgeom"] = _fmm.OutputConfig_write_mgeom_set
    __swig_getmethods__["write_mgeom"] = _fmm.OutputConfig_write_mgeom_get
    if _newclass:
        write_mgeom = _swig_property(_fmm.OutputConfig_write_mgeom_get, _fmm.OutputConfig_write_mgeom_set)
    __swig_setmethods__["write_spdist"] = _fmm.OutputConfig_write_spdist_set
    __swig_getmethods__["write_spdist"] = _fmm.OutputConfig_write_spdist_get
    if _newclass:
        write_spdist = _swig_property(_fmm.OutputConfig_write_spdist_get, _fmm.OutputConfig_write_spdist_set)
    __swig_setmethods__["write_pgeom"] = _fmm.OutputConfig_write_pgeom_set
    __swig_getmethods__["write_pgeom"] = _fmm.OutputConfig_write_pgeom_get
    if _newclass:
        write_pgeom = _swig_property(_fmm.OutputConfig_write_pgeom_get, _fmm.OutputConfig_write_pgeom_set)
    __swig_setmethods__["write_ep"] = _fmm.OutputConfig_write_ep_set
    __swig_getmethods__["write_ep"] = _fmm.OutputConfig_write_ep_get
    if _newclass:
        write_ep = _swig_property(_fmm.OutputConfig_write_ep_get, _fmm.OutputConfig_write_ep_set)
    __swig_setmethods__["write_tp"] = _fmm.OutputConfig_write_tp_set
    __swig_getmethods__["write_tp"] = _fmm.OutputConfig_write_tp_get
    if _newclass:
        write_tp = _swig_property(_fmm.OutputConfig_write_tp_get, _fmm.OutputConfig_write_tp_set)
    __swig_setmethods__["write_length"] = _fmm.OutputConfig_write_length_set
    __swig_getmethods__["write_length"] = _fmm.OutputConfig_write_length_get
    if _newclass:
        write_length = _swig_property(_fmm.OutputConfig_write_length_get, _fmm.OutputConfig_write_length_set)
    __swig_setmethods__["write_duration"] = _fmm.OutputConfig_write_duration_set
    __swig_getmethods__["write_duration"] = _fmm.OutputConfig_write_duration_get
    if _newclass:
        write_duration = _swig_property(_fmm.OutputConfig_write_duration_get, _fmm.OutputConfig_write_duration_set)
    __swig_setmethods__["write_speed"] = _fmm.OutputConfig_write_speed_set
    __swig_getmethods__["write_speed"] = _fmm.OutputConfig_write_speed_get
    if _newclass:
        write_speed = _swig_property(_fmm.OutputConfig_write_speed_get, _fmm.OutputConfig_write_speed_set)

    def __init__(self):
        this = _fmm.new_OutputConfig()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_OutputConfig
    __del__ = lambda self: None
OutputConfig_swigregister = _fmm.OutputConfig_swigregister
OutputConfig_swigregister(OutputConfig)

class ResultConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _fmm.ResultConfig_file_set
    __swig_getmethods__["file"] = _fmm.ResultConfig_file_get
    if _newclass:
        file = _swig_property(_fmm.ResultConfig_file_get, _fmm.ResultConfig_file_set)
    __swig_setmethods__["output_config"] = _fmm.ResultConfig_output_config_set
    __swig_getmethods__["output_config"] = _fmm.ResultConfig_output_config_get
    if _newclass:
        output_config = _swig_property(_fmm.ResultConfig_output_config_get, _fmm.ResultConfig_output_config_set)

    def validate(self):
        return _fmm.ResultConfig_validate(self)

    def to_string(self):
        return _fmm.ResultConfig_to_string(self)
    if _newclass:
        string2set = staticmethod(_fmm.ResultConfig_string2set)
    else:
        string2set = _fmm.ResultConfig_string2set
    if _newclass:
        load_from_xml = staticmethod(_fmm.ResultConfig_load_from_xml)
    else:
        load_from_xml = _fmm.ResultConfig_load_from_xml
    if _newclass:
        load_from_arg = staticmethod(_fmm.ResultConfig_load_from_arg)
    else:
        load_from_arg = _fmm.ResultConfig_load_from_arg
    if _newclass:
        register_arg = staticmethod(_fmm.ResultConfig_register_arg)
    else:
        register_arg = _fmm.ResultConfig_register_arg
    if _newclass:
        register_help = staticmethod(_fmm.ResultConfig_register_help)
    else:
        register_help = _fmm.ResultConfig_register_help

    def __init__(self):
        this = _fmm.new_ResultConfig()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_ResultConfig
    __del__ = lambda self: None
ResultConfig_swigregister = _fmm.ResultConfig_swigregister
ResultConfig_swigregister(ResultConfig)

def ResultConfig_string2set(s):
    return _fmm.ResultConfig_string2set(s)
ResultConfig_string2set = _fmm.ResultConfig_string2set

def ResultConfig_load_from_xml(xml_data):
    return _fmm.ResultConfig_load_from_xml(xml_data)
ResultConfig_load_from_xml = _fmm.ResultConfig_load_from_xml

def ResultConfig_load_from_arg(arg_data):
    return _fmm.ResultConfig_load_from_arg(arg_data)
ResultConfig_load_from_arg = _fmm.ResultConfig_load_from_arg

def ResultConfig_register_arg(options):
    return _fmm.ResultConfig_register_arg(options)
ResultConfig_register_arg = _fmm.ResultConfig_register_arg

def ResultConfig_register_help(oss):
    return _fmm.ResultConfig_register_help(oss)
ResultConfig_register_help = _fmm.ResultConfig_register_help

class STMATCHConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STMATCHConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STMATCHConfig, name)
    __repr__ = _swig_repr

    def __init__(self, k_arg=8, r_arg=300, gps_error_arg=50, vmax_arg=30, factor_arg=1.5, reverse_tolerance_arg=0.0):
        this = _fmm.new_STMATCHConfig(k_arg, r_arg, gps_error_arg, vmax_arg, factor_arg, reverse_tolerance_arg)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["k"] = _fmm.STMATCHConfig_k_set
    __swig_getmethods__["k"] = _fmm.STMATCHConfig_k_get
    if _newclass:
        k = _swig_property(_fmm.STMATCHConfig_k_get, _fmm.STMATCHConfig_k_set)
    __swig_setmethods__["radius"] = _fmm.STMATCHConfig_radius_set
    __swig_getmethods__["radius"] = _fmm.STMATCHConfig_radius_get
    if _newclass:
        radius = _swig_property(_fmm.STMATCHConfig_radius_get, _fmm.STMATCHConfig_radius_set)
    __swig_setmethods__["gps_error"] = _fmm.STMATCHConfig_gps_error_set
    __swig_getmethods__["gps_error"] = _fmm.STMATCHConfig_gps_error_get
    if _newclass:
        gps_error = _swig_property(_fmm.STMATCHConfig_gps_error_get, _fmm.STMATCHConfig_gps_error_set)
    __swig_setmethods__["vmax"] = _fmm.STMATCHConfig_vmax_set
    __swig_getmethods__["vmax"] = _fmm.STMATCHConfig_vmax_get
    if _newclass:
        vmax = _swig_property(_fmm.STMATCHConfig_vmax_get, _fmm.STMATCHConfig_vmax_set)
    __swig_setmethods__["factor"] = _fmm.STMATCHConfig_factor_set
    __swig_getmethods__["factor"] = _fmm.STMATCHConfig_factor_get
    if _newclass:
        factor = _swig_property(_fmm.STMATCHConfig_factor_get, _fmm.STMATCHConfig_factor_set)
    __swig_setmethods__["reverse_tolerance"] = _fmm.STMATCHConfig_reverse_tolerance_set
    __swig_getmethods__["reverse_tolerance"] = _fmm.STMATCHConfig_reverse_tolerance_get
    if _newclass:
        reverse_tolerance = _swig_property(_fmm.STMATCHConfig_reverse_tolerance_get, _fmm.STMATCHConfig_reverse_tolerance_set)

    def validate(self):
        return _fmm.STMATCHConfig_validate(self)
    if _newclass:
        load_from_xml = staticmethod(_fmm.STMATCHConfig_load_from_xml)
    else:
        load_from_xml = _fmm.STMATCHConfig_load_from_xml
    if _newclass:
        load_from_arg = staticmethod(_fmm.STMATCHConfig_load_from_arg)
    else:
        load_from_arg = _fmm.STMATCHConfig_load_from_arg
    if _newclass:
        register_arg = staticmethod(_fmm.STMATCHConfig_register_arg)
    else:
        register_arg = _fmm.STMATCHConfig_register_arg
    if _newclass:
        register_help = staticmethod(_fmm.STMATCHConfig_register_help)
    else:
        register_help = _fmm.STMATCHConfig_register_help
    __swig_destroy__ = _fmm.delete_STMATCHConfig
    __del__ = lambda self: None
STMATCHConfig_swigregister = _fmm.STMATCHConfig_swigregister
STMATCHConfig_swigregister(STMATCHConfig)

def STMATCHConfig_load_from_xml(xml_data):
    return _fmm.STMATCHConfig_load_from_xml(xml_data)
STMATCHConfig_load_from_xml = _fmm.STMATCHConfig_load_from_xml

def STMATCHConfig_load_from_arg(arg_data):
    return _fmm.STMATCHConfig_load_from_arg(arg_data)
STMATCHConfig_load_from_arg = _fmm.STMATCHConfig_load_from_arg

def STMATCHConfig_register_arg(options):
    return _fmm.STMATCHConfig_register_arg(options)
STMATCHConfig_register_arg = _fmm.STMATCHConfig_register_arg

def STMATCHConfig_register_help(oss):
    return _fmm.STMATCHConfig_register_help(oss)
STMATCHConfig_register_help = _fmm.STMATCHConfig_register_help

class STMATCH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STMATCH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STMATCH, name)
    __repr__ = _swig_repr

    def __init__(self, network, graph):
        this = _fmm.new_STMATCH(network, graph)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def match_wkt(self, wkt, config):
        return _fmm.STMATCH_match_wkt(self, wkt, config)

    def match_traj(self, traj, config):
        return _fmm.STMATCH_match_traj(self, traj, config)

    def match_gps_file(self, gps_config, result_config, config, use_omp=True):
        return _fmm.STMATCH_match_gps_file(self, gps_config, result_config, config, use_omp)
    __swig_destroy__ = _fmm.delete_STMATCH
    __del__ = lambda self: None
STMATCH_swigregister = _fmm.STMATCH_swigregister
STMATCH_swigregister(STMATCH)

class H3MatchResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H3MatchResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H3MatchResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["traj_id"] = _fmm.H3MatchResult_traj_id_set
    __swig_getmethods__["traj_id"] = _fmm.H3MatchResult_traj_id_get
    if _newclass:
        traj_id = _swig_property(_fmm.H3MatchResult_traj_id_get, _fmm.H3MatchResult_traj_id_set)
    __swig_setmethods__["hexs"] = _fmm.H3MatchResult_hexs_set
    __swig_getmethods__["hexs"] = _fmm.H3MatchResult_hexs_get
    if _newclass:
        hexs = _swig_property(_fmm.H3MatchResult_hexs_get, _fmm.H3MatchResult_hexs_set)

    def __init__(self):
        this = _fmm.new_H3MatchResult()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_H3MatchResult
    __del__ = lambda self: None
H3MatchResult_swigregister = _fmm.H3MatchResult_swigregister
H3MatchResult_swigregister(H3MatchResult)


def hexs2wkt(hexs, precision=12):
    return _fmm.hexs2wkt(hexs, precision)
hexs2wkt = _fmm.hexs2wkt

def xy2hex(px, py, level):
    return _fmm.xy2hex(px, py, level)
xy2hex = _fmm.xy2hex

def hex2wkt(index, precision=12):
    return _fmm.hex2wkt(index, precision)
hex2wkt = _fmm.hex2wkt

def hexpath(start, end):
    return _fmm.hexpath(start, end)
hexpath = _fmm.hexpath
class H3MMConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H3MMConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H3MMConfig, name)
    __repr__ = _swig_repr

    def __init__(self, h3level_arg=9, interpolate_arg=False):
        this = _fmm.new_H3MMConfig(h3level_arg, interpolate_arg)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["h3level"] = _fmm.H3MMConfig_h3level_set
    __swig_getmethods__["h3level"] = _fmm.H3MMConfig_h3level_get
    if _newclass:
        h3level = _swig_property(_fmm.H3MMConfig_h3level_get, _fmm.H3MMConfig_h3level_set)
    __swig_setmethods__["interpolate"] = _fmm.H3MMConfig_interpolate_set
    __swig_getmethods__["interpolate"] = _fmm.H3MMConfig_interpolate_get
    if _newclass:
        interpolate = _swig_property(_fmm.H3MMConfig_interpolate_get, _fmm.H3MMConfig_interpolate_set)

    def validate(self):
        return _fmm.H3MMConfig_validate(self)

    def _print(self):
        return _fmm.H3MMConfig__print(self)
    if _newclass:
        load_from_arg = staticmethod(_fmm.H3MMConfig_load_from_arg)
    else:
        load_from_arg = _fmm.H3MMConfig_load_from_arg
    if _newclass:
        register_arg = staticmethod(_fmm.H3MMConfig_register_arg)
    else:
        register_arg = _fmm.H3MMConfig_register_arg
    if _newclass:
        register_help = staticmethod(_fmm.H3MMConfig_register_help)
    else:
        register_help = _fmm.H3MMConfig_register_help
    __swig_destroy__ = _fmm.delete_H3MMConfig
    __del__ = lambda self: None
H3MMConfig_swigregister = _fmm.H3MMConfig_swigregister
H3MMConfig_swigregister(H3MMConfig)

def H3MMConfig_load_from_arg(arg_data):
    return _fmm.H3MMConfig_load_from_arg(arg_data)
H3MMConfig_load_from_arg = _fmm.H3MMConfig_load_from_arg

def H3MMConfig_register_arg(options):
    return _fmm.H3MMConfig_register_arg(options)
H3MMConfig_register_arg = _fmm.H3MMConfig_register_arg

def H3MMConfig_register_help(oss):
    return _fmm.H3MMConfig_register_help(oss)
H3MMConfig_register_help = _fmm.H3MMConfig_register_help

class H3MM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H3MM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H3MM, name)
    __repr__ = _swig_repr
    if _newclass:
        match_wkt = staticmethod(_fmm.H3MM_match_wkt)
    else:
        match_wkt = _fmm.H3MM_match_wkt
    if _newclass:
        match_traj = staticmethod(_fmm.H3MM_match_traj)
    else:
        match_traj = _fmm.H3MM_match_traj
    if _newclass:
        match_gps_file = staticmethod(_fmm.H3MM_match_gps_file)
    else:
        match_gps_file = _fmm.H3MM_match_gps_file

    def __init__(self):
        this = _fmm.new_H3MM()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _fmm.delete_H3MM
    __del__ = lambda self: None
H3MM_swigregister = _fmm.H3MM_swigregister
H3MM_swigregister(H3MM)

def H3MM_match_wkt(*args):
    return _fmm.H3MM_match_wkt(*args)
H3MM_match_wkt = _fmm.H3MM_match_wkt

def H3MM_match_traj(traj, config):
    return _fmm.H3MM_match_traj(traj, config)
H3MM_match_traj = _fmm.H3MM_match_traj

def H3MM_match_gps_file(gps_config, config, output_config, use_omp=True):
    return _fmm.H3MM_match_gps_file(gps_config, config, output_config, use_omp)
H3MM_match_gps_file = _fmm.H3MM_match_gps_file

# This file is compatible with both classic and new-style classes.


